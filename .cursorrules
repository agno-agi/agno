You are an expert in Python, Agno framework, and AI agent development.

Core Rules
- NEVER create agents in loops - reuse them for performance
- Always use output_schema for structured responses
- PostgreSQL in production, SQLite for dev only
- Start with single agent, scale up only when needed

CRITICAL: Agent Reuse Performance
```python
# WRONG - Recreates agent every time (significant overhead)
for query in queries:
    agent = Agent(...)  # DON'T DO THIS
    
# CORRECT - Create once, reuse
agent = Agent(...)
for query in queries:
    agent.run(query)
```

When to Use Each Pattern

Single Agent (default, start here):
- One clear task or domain
- Can be solved with tools + instructions
- Most use cases fit here
- Example: Search web and summarize, analyze data, generate content

Team (autonomous coordination):
- Multiple specialized agents with different expertise
- Need agents to decide who does what
- Complex tasks requiring multiple perspectives
- LLM coordinates delegation automatically
- Example: Research + Analysis + Writing with auto-coordination

Workflow (programmatic control):
- 2-5 sequential steps with clear flow
- Need conditional logic or branching
- Want full control over execution order
- Manual orchestration preferred
- Example: Extract → Transform → Load pipelines

Team Pattern (autonomous):
```python
from agno.team.team import Team

team = Team(
    members=[researcher, writer, editor],
    model=OpenAIChat(id="gpt-4o"),
    instructions="Coordinate to create reports"
)
```

Workflow Pattern (sequential):
```python
from agno.workflow.workflow import Workflow

workflow = Workflow(
    name="Blog Generator",
    steps=execution_function,
    db=SqliteDb(db_file="tmp/workflow.db"),
)
```

Knowledge/RAG (with all required imports):
```python
from agno.knowledge.knowledge import Knowledge
from agno.vectordb.lancedb import LanceDb, SearchType
from agno.knowledge.embedder.openai import OpenAIEmbedder

knowledge = Knowledge(
    vector_db=LanceDb(
        uri="tmp/lancedb",
        table_name="knowledge_base",
        search_type=SearchType.hybrid,
        embedder=OpenAIEmbedder(id="text-embedding-3-small"),
    ),
)

agent = Agent(
    model=OpenAIChat(id="gpt-4o"),
    knowledge=knowledge,
    search_knowledge=True,  # Critical: enables agentic RAG
    instructions="Use knowledge base, cite sources"
)
```

Chat History:
```python
agent = Agent(
    model=OpenAIChat(id="gpt-4o"),
    db=SqliteDb(db_file="tmp/agents.db"),
    user_id="user-123",
    add_history_to_context=True,  # Adds previous messages
    num_history_runs=3,
)
```

Structured Output:
```python
from pydantic import BaseModel

class Result(BaseModel):
    summary: str
    findings: list[str]

agent = Agent(
    model=OpenAIChat(id="gpt-4o"),
    output_schema=Result,  # Auto-validates response
)
result: Result = agent.run(query).content
```

AgentOS Production:
```python
from agno.os import AgentOS
from agno.db.postgres import PostgresDb

agent_os = AgentOS(
    agents=[agent],
    db=PostgresDb(db_url=os.getenv("DATABASE_URL")),
)
app = agent_os.get_app()
```

Common Mistakes
- Creating agents in loops (massive performance hit)
- Using Team when single agent would work (over-engineering)
- Forgetting search_knowledge=True with knowledge bases
- Using SQLite in production
- Not adding history when context matters
- Missing output_schema validation

Production
- Use PostgresDb (db_url=...) not SqliteDb
- Set show_tool_calls=False, debug_mode=False
- Wrap agent.run() in try-except

Docs: https://docs.agno.com
