# Agno Development Guide
# Build production-ready multi-agent systems with Agno

## About Agno
Agno is a high-performance framework for building intelligent agents and multi-agent systems:
- **Ultra-fast**: ~3μs agent instantiation, ~6.5KB memory footprint
- **Production-ready**: Built-in AgentOS runtime with FastAPI
- **Comprehensive**: Memory, Knowledge (RAG), Tools, MCP support
- **Flexible**: Teams (autonomous) and Workflows (structured)

## Core Philosophy

### Agent-First Development
- Each agent has a clear, focused responsibility
- Agents collaborate through Teams or coordinate via Workflows
- Start simple with one agent, scale as needed
- Reuse agents for performance (~3μs instantiation)

## Decision Framework

### When to Use Each Pattern

**Single Agent**: Focused tasks, one set of tools, no collaboration needed
```python
agent = Agent(
    model=OpenAIChat(id="gpt-4o"),
    tools=[search_tool],
    instructions="Clear, specific instructions"
)
```

**Team**: Multiple agents, autonomous coordination, different perspectives
```python
team = Team(
    members=[researcher, writer, editor],
    model=OpenAIChat(id="gpt-4o"),
    instructions="Coordinate to create comprehensive reports"
)
```

**Workflow**: Sequential steps, conditional logic, full control
```python
workflow = Workflow(
    steps=[
        Step(name="research", agent=researcher),
        Step(name="write", agent=writer),
    ]
)
```

## Agent Patterns

### The Specialist
Focused expertise with specific tools and knowledge:
```python
specialist = Agent(
    name="Python Expert",
    model=OpenAIChat(id="gpt-4o"),
    tools=[code_analyzer, profiler],
    instructions="Expert in Python performance optimization"
)
```

### The Coordinator
Manages multiple agents via Team:
```python
team = Team(
    members=[specialist1, specialist2, specialist3],
    model=OpenAIChat(id="gpt-4o"),
    instructions="Break down tasks and delegate to specialists"
)
```

### RAG-Powered Agent
Access to knowledge base:
```python
agent = Agent(
    model=OpenAIChat(id="gpt-4o"),
    knowledge=Knowledge(vector_db=PgVector(...)),
    search_knowledge=True,
    instructions="Answer using knowledge base, cite sources"
)
```

### Stateful Agent
Remembers context across conversations:
```python
agent = Agent(
    model=OpenAIChat(id="gpt-4o"),
    memory=MemoryDb(db=SqliteDb(db_file="memory.db")),
    session_id="user-{user_id}",
    add_history_to_context=True
)
```

## Critical Rules

### Performance
```python
# WRONG - Destroys performance
for query in queries:
    agent = Agent(...)  # Don't create in loops!
    
# CORRECT - Reuse agents
agent = Agent(...)
for query in queries:
    agent.run(query)  # Fast!
```

### Error Handling
```python
# Always wrap in try-except
from agno.exceptions import AgentException

try:
    response = agent.run(query)
except AgentException as e:
    logger.error(f"Error: {e}")
    # Handle appropriately
```

### Structured Output
```python
# Use Pydantic for validation
from pydantic import BaseModel

class Result(BaseModel):
    summary: str
    findings: list[str]

result = agent.run(query, response_model=Result)
```

### Clear Instructions
```python
# Be specific
agent = Agent(
    instructions="""
    You are a technical documentation expert.
    - Analyze code and generate clear documentation
    - Follow Google-style docstrings
    - Include usage examples
    """
)
```

### Tool Limits
```python
# Keep tools focused (5-8 max)
agent = Agent(
    tools=[search, calculator, emailer]  # Not 20 tools!
)
```

## Tool Development

### Simple Function Tools
```python
def calculate(operation: str, x: float, y: float) -> float:
    """Perform mathematical operations.
    
    Args:
        operation: add, subtract, multiply, divide
        x: First number
        y: Second number
    """
    # Implementation
    pass

agent = Agent(tools=[calculate])
```

### Custom Toolkit
```python
from agno.tools import Toolkit

class WeatherTools(Toolkit):
    def __init__(self, api_key: str = None):
        super().__init__(name="weather", tools=[self.get_weather])
        self.api_key = api_key or os.getenv("WEATHER_API_KEY")
    
    def get_weather(self, city: str) -> dict:
        """Get current weather for a city."""
        try:
            # Implementation with error handling
            return response.json()
        except Exception as e:
            logger.error(f"Weather error: {e}")
            return {"error": str(e)}
```

## Testing

```python
import pytest

@pytest.fixture
def test_agent():
    return Agent(model=OpenAIChat(id="gpt-4o"))

def test_basic_response(test_agent):
    response = test_agent.run("What is 2+2?")
    assert "4" in response.content

@pytest.mark.asyncio
async def test_async(test_agent):
    response = await test_agent.arun("Hello")
    assert response is not None
```

## Production Deployment

```python
from agno.os import AgentOS
from agno.db.postgres import PostgresDb

# Production configuration
agent = Agent(
    model=OpenAIChat(id="gpt-4o"),
    db=PostgresDb(connection_url=os.getenv("DATABASE_URL")),
    show_tool_calls=False,
    debug=False,
)

# Deploy with AgentOS
agent_os = AgentOS(agent=agent)
app = agent_os.get_app()
```

### Production Checklist
- Use PostgreSQL (not SQLite)
- Environment variables for secrets
- Error handling on all calls
- Logging configured
- Rate limiting
- Tests passing

## Code Quality

### Always Use Type Hints
```python
def create_agent(name: str, model_id: str) -> Agent:
    return Agent(name=name, model=OpenAIChat(id=model_id))
```

### Use Pydantic for Validation
```python
from pydantic import BaseModel, Field

class AgentConfig(BaseModel):
    name: str = Field(..., min_length=1)
    model_id: str
    temperature: float = Field(0.7, ge=0, le=2)
```

### Structured Logging
```python
from agno.utils.log import logger

logger.info("Agent created", extra={
    "agent_name": agent.name,
    "model": agent.model.id
})
```

## Model Selection

- **gpt-4o-mini**: Simple tasks, high volume
- **gpt-4o**: Complex reasoning, planning
- **claude-3.5-sonnet**: Long context (200K)
- **groq/llama**: Speed-critical

## Key Principles

1. **Reuse agents** - Never create in loops
2. **Clear instructions** - Be specific
3. **Type safety** - Use type hints and Pydantic
4. **Error handling** - Try-except on all calls
5. **Test early** - Write tests before deploy
6. **Log everything** - Structured logging
7. **Start simple** - Add complexity only when needed
8. **Focused tools** - 5-8 tools max per agent
9. **Structured output** - Use Pydantic models
10. **PostgreSQL in production** - Not SQLite

## Project Structure

```
project/
├── agents/          # Agent definitions
├── tools/           # Custom tools
├── workflows/       # Workflow definitions
├── tests/           # Test suites
├── .cursorrules     # This file
└── main.py          # AgentOS entry
```

## Resources

- Docs: https://docs.agno.com
- Examples: https://docs.agno.com/examples
- Discord: https://discord.gg/4MtYHHrgA8
- GitHub: https://github.com/agno-agi/agno
